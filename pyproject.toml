[build-system]
requires = ["uv_build>=0.9.6,<0.10.0"]
build-backend = "uv_build"

[project]
name = "grpcmodel"
dynamic = ["version"]
description = "gRPCModel, gRPC models and schemas in Python, designed for simplicity, compatibility, and robustness."
readme = "README.md"
requires-python = ">=3.13"
authors = [
    { name = "River Studio", email = "git@river-studio.net" },
]

classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: AsyncIO",
    "Framework :: gRPC",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Topic :: Database",
    "Topic :: Database :: Database Engines/Servers",
    "Topic :: Internet",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Internet :: WWW/HTTP",
    "Typing :: Typed",
]

dependencies = [
    "SQLAlchemy >=2.0.14,<2.1.0",
    "protobuf>=5.29.5",
    "pydantic >=1.10.13,<3.0.0",
]

[project.urls]
Homepage = "https://github.com/river-studio-net/grpcmodel"
Documentation = "https://github.com/river-studio-net/grpcmodel?tab=readme-ov-file"
Repository = "https://github.com/river-studio-net/grpcmodel"
Issues = "https://github.com/river-studio-net/grpcmodel/issues"
Changelog = "https://github.com/river-studio-net/grpcmodel/releases"

[tool.coverage.run]
parallel = true
data_file = "coverage/.coverage"
source = [
    "tests",
    "sqlmodel"
]
context = '${CONTEXT}'
dynamic_context = "test_function"
relative_files = true

[tool.coverage.report]
show_missing = true
sort = "-Cover"
exclude_lines = [
    "pragma: no cover",
    "@overload",
    'if __name__ == "__main__":',
    "if TYPE_CHECKING:",
]

[tool.coverage.html]
show_contexts = true

[tool.mypy]
strict = true
exclude = "sqlmodel.sql._expression_select_gen"

[[tool.mypy.overrides]]
module = "docs_src.*"
disallow_incomplete_defs = false
disallow_untyped_defs = false
disallow_untyped_calls = false

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191", # indentation contains tabs
]

[tool.ruff.lint.per-file-ignores]
# "__init__.py" = ["F401"]

[tool.ruff.lint.isort]
known-third-party = ["sqlmodel", "sqlalchemy", "pydantic", "fastapi"]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
